#!/bin/sh
set -e

export PATH="/root/.local/bin:/root/.cargo/bin:$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:$PATH"

case "$1" in
configure)
    # Check if we're in a build environment (pi-gen, chroot, etc)
    BUILD_ENV=0

    # Detection method 1: Check for pi-gen specific files
    if [ -f /etc/pi-gen_id ] || [ -f /boot/pi-gen.txt ]; then
        echo "Detected pi-gen build environment (marker files)"
        BUILD_ENV=1
    fi

    # Detection method 2: Check for pi-gen environment variables
    if [ "$BUILD_ENV" -eq 0 ] && ([ -n "$PI_GEN" ] || [ -n "$STAGE" ] || [ -n "$STAGE_DIR" ]); then
        echo "Detected pi-gen build environment (environment variables)"
        BUILD_ENV=1
    fi

    # Detection method 3: Check if we're in a chroot using systemd-detect-virt
    if [ "$BUILD_ENV" -eq 0 ] && command -v systemd-detect-virt >/dev/null 2>&1; then
        VIRT_TYPE=$(systemd-detect-virt 2>/dev/null || true)
        if [ "$VIRT_TYPE" = "chroot" ] || [ "$VIRT_TYPE" = "docker" ] || [ "$VIRT_TYPE" = "lxc" ]; then
            echo "Detected build environment: $VIRT_TYPE"
            BUILD_ENV=1
        fi
    fi

    # Detection method 4: Check for .dockerenv or other container markers
    if [ "$BUILD_ENV" -eq 0 ] && [ -f /.dockerenv ]; then
        echo "Detected Docker build environment"
        BUILD_ENV=1
    fi

    # Detection method 5: Check if we're in a chroot via /proc
    if [ "$BUILD_ENV" -eq 0 ] && [ -f /proc/1/mountinfo ]; then
        if ! grep -q " / / " /proc/1/mountinfo 2>/dev/null; then
            echo "Detected chroot environment"
            BUILD_ENV=1
        fi
    fi

    # Detection method 6: Check if systemd is not running (common in build environments)
    if [ "$BUILD_ENV" -eq 0 ]; then
        if ! systemctl is-system-running >/dev/null 2>&1; then
            echo "Detected build environment (systemd not running)"
            BUILD_ENV=1
        fi
    fi

    cd /opt/distiller-update

    # Check if uv is available, if not use python3 -m venv
    if command -v uv >/dev/null 2>&1; then
        echo "Setting up virtual environment with uv..."
        
        # Setup virtual environment
        [ -d ".venv" ] && rm -rf ".venv"
        if ! uv venv --system-site-packages 2>/dev/null; then
            echo "Creating venv without system-site-packages..."
            uv venv || {
                echo "Warning: Failed to create virtual environment with uv"
                # Fall back to python3 -m venv
                python3 -m venv .venv
            }
        fi

        # Install dependencies - use pip install instead of sync to avoid editable install issues
        if [ -f ".venv/bin/python" ]; then
            echo "Installing dependencies..."
            uv pip install . || {
                echo "Warning: uv pip install failed, trying with standard pip..."
                .venv/bin/pip install --upgrade pip
                .venv/bin/pip install .
            }
        else
            echo "Error: Virtual environment not created properly"
            exit 1
        fi
    else
        echo "uv not found, using python3 -m venv..."
        
        # Setup virtual environment
        [ -d ".venv" ] && rm -rf ".venv"
        python3 -m venv --system-site-packages .venv || python3 -m venv .venv
        
        # Install dependencies using pip
        .venv/bin/pip install --upgrade pip
        .venv/bin/pip install .
    fi

    VENV_PATH="/opt/distiller-update/.venv"

    # Set permissions
    find /opt/distiller-update -type d -exec chmod 755 {} \; \
        -o -type f -name "*.py" -exec chmod 644 {} \;
    chmod +x /usr/bin/distiller-update

    # Update systemd service files to use venv Python
    if [ -f /etc/systemd/system/distiller-update.service ]; then
        sed -i "s|/usr/bin/python3|$VENV_PATH/bin/python|g" /etc/systemd/system/distiller-update.service
        sed -i "s|ExecStart=distiller-update|ExecStart=/usr/bin/distiller-update|g" /etc/systemd/system/distiller-update.service
    fi

    # Ensure cache directory exists with proper permissions
    mkdir -p /var/cache/distiller-update
    chmod 755 /var/cache/distiller-update

    # Reload systemd if not in build environment
    if [ "$BUILD_ENV" -eq 0 ]; then
        systemctl daemon-reload 2>/dev/null || true
        # Enable the timer, not the service (timer will trigger the service)
        systemctl enable distiller-update.timer 2>/dev/null || true
        echo "Distiller Update service installed. Start with: systemctl start distiller-update.timer"
    else
        echo "Skipping systemd configuration in build environment"
    fi
    ;;

abort-upgrade | abort-remove | abort-deconfigure) ;;

*)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
    ;;
esac

#DEBHELPER#

exit 0